
#   This file is part of DirectSum.jl. It is licensed under the AGPL license
#   Grassmann Copyright (C) 2019 Michael Reed

import AbstractTensors: scalar, involute, unit, even, odd

## generators

function labels(V::T,vec::String=pre[1],cov::String=pre[2],duo::String=pre[3],dif::String=pre[4]) where T<:Manifold
    N,io,icr = ndims(V),IOBuffer(),1
    els = Array{Symbol,1}(undef,1<<N)
    els[1] = Symbol(vec)
    for i ∈ 1:N
        set = combo(N,i)
        for k ∈ 1:length(set)
            @inbounds printlabel(io,V,bit2int(indexbits(N,set[k])),true,vec,cov,duo,dif)
            icr += 1
            @inbounds els[icr] = Symbol(String(take!(io)))
        end
    end
    return els
end

#@pure labels(V::T) where T<:Manifold = labels(V,pre[1],pre[2],pre[3],pre[4])

@pure function generate(V::Manifold{N}) where N
    exp = (SubManifold{V})[SubManifold{V,0}(g_zero(UInt))]
    for i ∈ 1:N
        set = combo(N,i)
        for k ∈ 1:length(set)
            @inbounds push!(exp,SubManifold{V,i}(bit2int(indexbits(N,set[k]))))
        end
    end
    return exp
end

export @basis, @basis_str, @dualbasis, @dualbasis_str, @mixedbasis, @mixedbasis_str

"""
    basis(V::Manifold,:V,"v","w","∂","ϵ")

Generates `Basis` declaration having `Manifold` specified by `V`.
The first argument provides pseudoscalar specifications, the second argument is the variable name for the `Manifold`, and the third and fourth argument are variable prefixes of the `SubManifold` vector names (and covector basis names).
"""
function basis(V::Manifold,sig=vsn[1],vec=pre[1],cov=pre[2],duo=pre[3],dif=pre[4])
    N = ndims(V)
    if N > algebra_limit
        Λ(V) # fill cache
        basis = generate(V)
        sym = labels(V,string.([vec,cov,duo,dif])...)
    else
        basis = Λ(V).b
        sym = labels(V,string.([vec,cov,duo,dif])...)
    end
    @inbounds exp = Expr[Expr(:(=),esc(sig),typeof(V)<:SubManifold ? V : SubManifold(V)),
        Expr(:(=),esc(Symbol(vec)),basis[1])]
    for i ∈ 2:1<<N
        @inbounds push!(exp,Expr(:(=),esc(Symbol("$(basis[i])")),basis[i]))
        @inbounds push!(exp,Expr(:(=),esc(sym[i]),basis[i]))
    end
    push!(exp,Expr(:(=),esc(Symbol(vec,'⃖')) ,esc(vec)))
    return Expr(:block,exp...,Expr(:tuple,esc(sig),esc.(sym)...))
end

"""
    @basis

Generates `SubManifold` elements having `Manifold` specified by `V`.
As a result of this macro, all of the `SubManifold{V,G}` elements generated by that `TensorBundle` become available in the local workspace with the specified naming.
The first argument provides pseudoscalar specifications, the second argument is the variable name for the `Manifold`, and the third and fourth argument are variable prefixes of the `SubManifold` vector names (and covector basis names).
Default for `@basis M` is `@basis M V v w ∂ ϵ`.
"""
macro basis(q,sig=vsn[1],vec=pre[1],cov=pre[2],duo=pre[3],dif=pre[4])
    basis(typeof(q)∈(Symbol,Expr) ? (@eval(__module__,$q)) : Manifold(q),sig,string.([vec,cov,duo,dif])...)
end

macro basis_str(str)
    basis(Manifold(str))
end

"""
    @dualbasis

Generates `SubManifold` elements having `Manifold` specified by `V'`.
As a result of this macro, all of the `SubManifold{V',G}` elements generated by that `TensorBundle` become available in the local workspace with the specified naming.
The first argument provides pseudoscalar specifications, the second argument is the variable name for the dual `Manifold`, and the third and fourth argument are variable prefixes of the `SubManifold` covector names (and tensor field basis names).
Default for `@dualbasis M` is `@dualbasis M VV w ϵ`.
"""
macro dualbasis(q,sig=vsn[2],cov=pre[2],dif=pre[4])
    basis((typeof(q)∈(Symbol,Expr) ? (@eval(__module__,$q)) : Manifold(q))',sig,string.([pre[1],cov,pre[3],dif])...)
end

macro dualbasis_str(str)
    basis(Manifold(str)',vsn[2])
end

"""
    @mixedbasis

Generates `SubManifold` elements having `Manifold` specified by `V⊕V'`.
As a result of this macro, all of the `SubManifold{V⊕V',G}` elements generated by that `TensorBundle` become available in the local workspace with the specified naming.
The first argument provides pseudoscalar specifications, the second argument is the variable name for the `Manifold`, and the third and fourth argument are variable prefixes of the `SubManifold` vector names (and covector basis names).
Default for `@mixedbasis M` is `@mixedbasis M V v w ∂ ϵ`.
"""
macro mixedbasis(q,sig=vsn[3],vec=pre[1],cov=pre[2],duo=pre[3],dif=pre[4])
    V = typeof(q)∈(Symbol,Expr) ? (@eval(__module__,$q)) : Manifold(q)
    bases = basis(V⊕V',sig,string.([vec,cov,duo,dif])...)
    Expr(:block,bases,basis(V',vsn[2]),basis(V),bases.args[end])
end

macro mixedbasis_str(str)
    V = Manifold(str)
    bases = basis(V⊕V',vsn[3])
    Expr(:block,bases,basis(V',vsn[2]),basis(V),bases.args[end])
end

@inline function lookup_basis(V::Manifold,v::Symbol)::Union{Simplex,SubManifold}
    p,b,w,z = indexparity(V,v)
    z && return g_zero(V)
    d = SubManifold{w}(b)
    return p ? Simplex(-1,d) : d
end

## fundamentals

abstract type SubAlgebra{V} <: TensorAlgebra{V} end

Base.adjoint(G::A) where A<:SubAlgebra{V} where V = Λ(dual(V))
@pure dual(G::A) where A<: SubAlgebra = G'
Base.firstindex(a::T) where T<:SubAlgebra = 1
Base.lastindex(a::T) where T<:SubAlgebra{V} where V = 1<<ndims(V)
Base.length(a::T) where T<:SubAlgebra{V} where V = 1<<ndims(V)

==(::SubAlgebra{V},::SubAlgebra{W}) where {V,W} = V == W

⊕(::SubAlgebra{V},::SubAlgebra{W}) where {V,W} = getalgebra(V⊕W)
+(::SubAlgebra{V},::SubAlgebra{W}) where {V,W} = getalgebra(V⊕W)

## Algebra{N}

@computed struct Basis{V} <: SubAlgebra{V}
    b::SVector{1<<ndims(V),SubManifold{V}}
    g::Dict{Symbol,Int}
end

@doc """
    DirectSum.Basis{V} <: SubAlgebra{V} <: TensorAlgebra{V}

Grassmann basis container with cache of `SubManifold` elements and their `Symbol` names.
""" Basis

getindex(a::Basis,i::Int) = getfield(a,:b)[i]
getindex(a::Basis,i::Colon) = getfield(a,:b)
getindex(a::Basis,i::UnitRange{Int}) = [getindex(a,j) for j ∈ i]

@pure function Base.getproperty(a::Basis{V},v::Symbol) where V
    return if v ∈ (:b,:g)
        getfield(a,v)
    elseif haskey(a.g,v)
        a[getfield(a,:g)[v]]
    else
        lookup_basis(V,v)
    end
end

function Base.collect(s::Manifold)
    sym = labels(s)
    @inbounds Basis{s}(generate(s),Dict{Symbol,Int}([sym[i]=>i for i ∈ 1:1<<ndims(s)]))
end

@pure Basis(s::Manifold) = getalgebra(s)
@pure Basis(n::Int,d::Int=0,o::Int=0,s=zero(Bits)) = getalgebra(n,d,o,s)
Basis(s::String) = getalgebra(Manifold(s))
Basis(s::String,v::Symbol) = getbasis(Manifold(s),v)

function Base.show(io::IO,a::Basis{V}) where V
    N = ndims(V)
    print(io,"DirectSum.Basis{$V,$(1<<N)}(")
    for i ∈ 1:1<<N-1
        print(io,a[i],", ")
    end
    print(io,a[end],")")
end

export Λ, @Λ_str, getalgebra, getbasis, TensorAlgebra, SubAlgebra

const Λ = Basis

macro Λ_str(str)
    Basis(str)
end

@pure function Base.getproperty(λ::typeof(Λ),v::Symbol)
    v ∈ (:body,:var) && (return getfield(λ,v))
    V = string(v)
    N = parse(Int,V[2])
    C = V[1]∉('D','C') ? 0 : 1
    length(V) < 5 && (V *= join(zeros(Int,5-length(V))))
    S = UInt(parse(Int,V[5:end]))
    getalgebra(N,doc2m(parse(Int,V[3]),parse(Int,V[4]),C),C>0 ? flip_sig(N,S) : S)
end

# Allocating thread-safe $(2^n)×SubManifold{G,V}
const Λ0 = Λ{V0}(SVector{1,SubManifold{V0,0,UInt(0)}}(SubManifold{V0,0}(UInt(0))),Dict(:e=>1))

for V ∈ (:Signature,:DiagonalForm)
    @eval begin
        const $(Symbol(:algebra_cache_,V)) = Vector{Vector{Dict{UInt,Vector{Dict{UInt,Λ}}}}}[]
        @pure getalgebra(V::$V) = getalgebra(SubManifold(V))
    end
end
@eval begin
    @pure function getalgebra(n::Int,m::Int,s,S::UInt,vs::Type,f::Int=0,d::Int=0)
        n==0 && (return Λ0)
        n > sparse_limit && (return $(Symbol(:getextended))(n,m,s,S,vs,f,d))
        n > algebra_limit && (return $(Symbol(:getsparse))(n,m,s,S,vs,f,d))
        f1,d1,m1 = f+1,d+1,m+1
        alc = if vs <: Signature
            algebra_cache_Signature
        elseif vs <: DiagonalForm
            algebra_cache_DiagonalForm
        end
        for F ∈ length(alc)+1:f1
            push!(alc,Vector{Dict{UInt,Vector{Dict{UInt,Λ}}}}[])
        end
        for D ∈ length(alc[f1])+1:d1
            push!(alc[f1],Dict{UInt,Vector{Dict{UInt,Λ}}}[])
        end
        for D ∈ length(alc[f1][d1])+1:n
            push!(alc[f1][d1],Dict{UInt,Vector{Dict{UInt,Λ}}}())
        end
        @inbounds if !haskey(alc[f1][d1][n],S)
            @inbounds push!(alc[f1][d1][n],S=>[Dict{UInt,Λ}() for k∈1:12])
        end
        @inbounds if !haskey(alc[f1][d1][n][S][m1],s)
            @inbounds push!(alc[f1][d1][n][S][m1],s=>collect(SubManifold{vs(),count_ones(S),S}()))
        end
        @inbounds alc[f1][d1][n][S][m1][s]
    end
    @pure function getalgebra(V::SubManifold{M,N,S}) where {M,N,S}
        isdyadic(V) && N>2algebra_limit && (return getextended(V))
        getalgebra(ndims(M),options(M),metric(M),S,typeof(M),diffvars(M),diffmode(M))
    end
end
@pure getalgebra(n::Int,d::Int,o::Int,s,c::Int=0) = getalgebra(n,doc2m(d,o,c),s)
@pure getalgebra(n::Int,m::Int,s) = getalgebra(n,m,UInt(s),UInt(1)<<n-1,Signature{n,m,UInt(s),0,0})

"""
    getbasis(V::Manifold,v)

Fetch a specific `SubManifold{G,V}` element from an optimal `SubAlgebra{V}` selection.
"""
@inline getbasis(V::M,b) where M<:Manifold = getbasis(V,UInt(b))
@pure function getbasis(V::M,B::UInt) where M<:Manifold{N} where N
    if N ≤ algebra_limit
        @inbounds getalgebra(V).b[basisindex(ndims(V),B)]
    else
        SubManifold{V,count_ones(B)}(B)
    end
end
@pure getbasis(V::M,v::Symbol) where M<:Manifold = getproperty(getalgebra(V),v)

@pure SubManifold{V}() where V = getbasis(V,0)
@pure SubManifold{V}(i::Bits) where V = getbasis(V,i)
SubManifold{V}(b::BitArray{1}) where V = getbasis(V,bit2int(b))
Base.one(b::Type{SubManifold{V}}) where V = getbasis(V,bits(b))
Base.zero(b::Type{SubManifold{V}}) where V = 0*one(b)
@inline Base.one(t::Type{T}) where T<:TensorBundle = one(t())
@inline Base.zero(t::Type{T}) where T<:TensorBundle = zero(t())
Base.one(V::T) where T<:TensorBundle = SubManifold{V}()
Base.zero(V::T) where T<:TensorBundle = 0*one(V)
Base.one(V::SubManifold{M}) where M = SubManifold{isbasis(V) ? M : V}()
Base.zero(V::SubManifold) = 0*one(V)
Base.one(V::T) where T<:TensorGraded = one(Manifold(V))
Base.zero(V::T) where T<:TensorGraded = zero(Manifold(V))

@pure g_one(b::Type{SubManifold{V}}) where V = getbasis(V,bits(b))
@pure g_zero(V::Manifold) = 0*one(V)
@pure g_one(V::Manifold) = SubManifold{V}()
@pure g_one(::Type{T}) where T = one(T)
@pure g_zero(::Type{T}) where T = zero(T)

## SparseAlgebra{V}

"""
    DirectSum.SparseBasis{V} <: SubAlgebra{V} <: TensorAlgebra{V}

Grassmann basis with sparse cache of `SubManifold{G,V}` elements and their `Symbol` names.
"""
struct SparseBasis{V} <: SubAlgebra{V}
    b::Vector{Symbol}
    g::Dict{Symbol,Int}
end

@pure function SparseBasis(s::Manifold)
    sym = labels(s)
    SparseBasis{s}(sym,Dict{Symbol,Int}([sym[i]=>i for i ∈ 1:1<<ndims(s)]))
end

@pure function getindex(a::SparseBasis{V},i::Int) where V
    N = ndims(V)
    if N ≤ algebra_limit
        getalgebra(V).b[i]
    else
        F = findfirst(x->1+binomsum(N,x)-i>0,0:N)
        G = F ≠ nothing ? F-2 : N
        @inbounds B = indexbasis(N,G)[i-binomsum(N,G)]
        SubManifold{V,count_ones(B)}(B)
    end
end

@pure function Base.getproperty(a::SparseBasis{V},v::Symbol) where V
    return if v ∈ (:b,:g)
        getfield(a,v)
    elseif haskey(a.g,v)
        @inbounds a[getfield(a,:g)[v]]
    else
        lookup_basis(V,v)
    end
end

@pure SparseBasis(n::Int,d::Int=0,o::Int=0,s=zero(Bits)) = getsparse(n,d,o,s)
SparseBasis(s::String) = getsparse(Manifold(s))
SparseBasis(s::String,v::Symbol) = getbasis(Manifold(s),v)

function Base.show(io::IO,a::SparseBasis{V}) where V
    print(io,"DirectSum.SparseBasis{$V,$(1<<ndims(V))}($(a[1]), ..., $(a[end]))")
end

## ExtendedAlgebra{V}

"""
    DirectSum.ExtendedBasis{V} <: SubAlgebra{V} <: TensorAlgebra{V}

Grassmann basis container without a dedicated `SubManifold` cache (only lazy caching).
"""
struct ExtendedBasis{V} <: SubAlgebra{V} end

@pure ExtendedBasis(s::Manifold) = ExtendedBasis{s}()

@pure function Base.getproperty(a::ExtendedBasis{V},v::Symbol) where V
    if v ∈ (:b,:g)
        throw(error("ExtendedBasis does not have field $v"))
    else
        return lookup_basis(V,v)
    end
end

@pure ExtendedBasis(n::Int,d::Int=0,o::Int=0,s=zero(Bits)) = getextended(n,d,o,s)
ExtendedBasis(s::String) = getextended(Manifold(s))
ExtendedBasis(s::String,v::Symbol) = getbasis(Manifold(s),v)

function Base.show(io::IO,a::ExtendedBasis{V}) where V
    N = 1<<ndims(V)
    print(io,"DirectSum.ExtendedBasis{$V,$N}($(getbasis(V,0)), ..., $(getbasis(V,N-1)))")
end

# Extending (2^n)×SubManifold{V}

for (ExtraBasis,extra) ∈ ((SparseBasis,:sparse),(ExtendedBasis,:extended))
    getextra = Symbol(:get,extra)
    getalg = Symbol(getextra,:_Signature)
    extra_cache = Symbol(extra,:_cache)
    for V ∈ (:Signature,:DiagonalForm)
        @eval begin
            const $(Symbol(extra_cache,:_,V)) = Vector{Vector{Dict{UInt,Vector{Dict{UInt,$ExtraBasis}}}}}[]
            @pure $getextra(V::$V) = $getextra(SubManifold(V))
        end
    end
    @eval begin
        @pure function $getextra(n::Int,m::Int,s::UInt,S::UInt,vs,f::Int=0,d::Int=0)
            n==0 && (return $ExtraBasis(V0))
            d1,f1,m1 = d+1,f+1,m+1
            exc = if vs <: Signature
                $(Symbol(extra_cache,:_Signature))
            elseif vs <: DiagonalForm
                $(Symbol(extra_cache,:_DiagonalForm))
            end
            for F ∈ length(exc)+1:f1
                push!(exc,Vector{Dict{UInt,Vector{Dict{UInt,$ExtraBasis}}}}[])
            end
            for D ∈ length(exc[f1])+1:d1
                push!(exc[f1],Dict{UInt,Vector{Dict{UInt,$ExtraBasis}}}[])
            end
            for D ∈ length(exc[f1][d1])+1:n
                push!(exc[f1][d1],Dict{UInt,Vector{Dict{UInt,$ExtraBasis}}}())
            end
            @inbounds if !haskey(exc[f1][d1][n],S)
                @inbounds push!(exc[f1][d1][n],S=>[Dict{UInt,$ExtraBasis}() for k∈1:12])
            end
            @inbounds if !haskey(exc[f1][d1][n][S][m1],s)
                @inbounds push!(exc[f1][d1][n][S][m1],s=>$ExtraBasis(SubManifold{vs(),count_ones(S),S}()))
            end
            @inbounds exc[f1][d1][n][S][m1][s]
        end
        @pure $getextra(V::SubManifold{M,N,S} where N) where {M,S} = $getextra(ndims(M),options(M),metric(M),S,typeof(M),diffvars(M),diffmode(M))
    end
    @eval begin
        @pure $getextra(n::Int,d::Int,o::Int,s,c::Int=0) = $getalg(n,doc2m(d,o,c),s)
        @pure $getextra(n::Int,m::Int,s) = $getalg(n,m,UInt(s),UInt(1)<<n-1,Signature{n,m,UInt(s),0,0})
    end
end

